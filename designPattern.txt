Observer Pattern:
定义了对象之间的一对多依赖，一个对象改变状态，所有依赖者都会受到通知并自动更新


Decorator Pattern:
装饰者和被装饰者有同一个超类型；
装饰后的对象可以替代原始对象（因为有相同的supertype）;
装饰者可以在被装饰者的行为之前/之后加上自己的行为；
不改变接口，增加责任。

Factory Pattern:
定义了一个创建对象的接口，但由子类决定要实例化的类是哪一个，把实例化推迟到子类。
抽象工厂模式：提供一个接口用于创建一组相关或依赖对象，而不需要明确指定具体类。

Singleton Pattern:
构造器为私有，外人想要取得实例必须要用静态方法getInstance。

Command Pattern:
client创建command的具体对象，传参；
invoker调用execute方法执行，但并不知道具体谁在执行；
receiver执行具体命令，即实现execute的具体方法。
可以用来实现日志和事务transaction系统。

Adapter Pattern:
将一个类的接口转换成另一个。
Facade_Pattern:把多个接口组合起来提供简化的接口，原有的接口也可以用。

Template Pattern:
定义一个算法的步骤，允许子类为一个或多个步骤提供实现。
使得子类可以在不改变算法结构的情况下重新定义算法的某些步骤。

Composite Pattern:
将对象组合成树形结构来表现’整体/部分’层次结构。

Representative Pattern:

